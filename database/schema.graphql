type Token {
    token: String!
}

type Usuario {
    id: ID
    usuario: String
    nombre: String
    rol: String
}

type Cliente {
    id: ID
    nombre: String
    apellido: String
    empresa: String
    emails: [Email]
    edad: Int
    tipo: TipoCliente
}

type ClienteTotal {
    total: Float
    cliente: [Cliente]
}

type VendedorTotal {
    total: Float
    vendedor: [Usuario]
}

type Email {
    email: String
}

type Pedido {
    id: ID
    pedido: [PedidoProducto]
    total: Int
    fecha: String
    cliente: ID
    estado: EstadoPedido
}

type PedidoProducto {
    id: ID,
    cantidad: Int
}

enum TipoCliente {
    BASICO
    PREMIUM
    VVIP
}

enum EstadoPedido {
    PENDIENTE
    COMPLETADO
    CANCELADO
}

type Producto {
    id: ID
    nombre: String
    precio: Int
    stock: Int
}

type Query {
    # Clientes
    getClientes(limite: Int, offset: Int, vendedor: String): [Cliente]
    getCliente(id: ID): Cliente
    totalClientes(vendedor: String): String
    # Productos
    getProductos(limite: Int, offset: Int, hideSoldOut: Boolean): [Producto]
    getProducto(id: ID): Producto
    totalProductos: String
    # Pedidos
    getPedidos(cliente: ID): [Pedido]
    # Gráficos
    topClientes: [ClienteTotal]
    topVendedores: [VendedorTotal]
    # Usuarios
    getUsuario: Usuario
}

input EmailInput {
    email: String
}

input PedidoInput {
    id: ID
    pedido: [PedidoProductoInput]
    total: Int
    fecha: String
    cliente: ID
    estado: EstadoPedido
    vendedor: ID
}

input PedidoProductoInput {
    id: ID,
    cantidad: Int
}

input ClienteInput {
    id: ID
    nombre: String!
    apellido: String!
    empresa: String!
    emails: [EmailInput]
    edad: Int!
    tipo: TipoCliente!
    vendedor: ID
}

input ProductoInput {
    id: ID
    nombre: String!
    precio: Int!
    stock: Int!
}

type Mutation {
    # Clientes
    crearCliente(formulario: ClienteInput): Cliente
    actualizarCliente(formulario: ClienteInput): Cliente
    eliminarCliente(id: ID!): String
    # Productos
    crearProducto(formulario: ProductoInput) : Producto
    actualizarProducto(formulario: ProductoInput): Producto
    eliminarProducto(id: ID!): String
    # Pedidos
    crearPedido(formulario: PedidoInput) : Pedido
    actualizarPedido(formulario: PedidoInput, estadoAnterior: String) : String # El resolve del resolver devuelve un String, por eso escribo String acá
    # Usuarios
    crearUsuario(usuario: String!, nombre: String!, password: String!, rol: String!) : String
    autenticarUsuario(usuario: String!, password: String!) : Token
}